                                                                 Coding Tank - Ifood
1.Desafio: Conversor de Horários

Ao efetuar a compra de sua refeição no Ifood o sistema, após confirmação do pagamento, envia seu pedido ao restaurante, que ao aceitá-lo registra esse momento e lhe retorna o horário de previsão da sua entrega. Esse recurso, apesar de interessante começou a gerar uma quantidade significativa de reclamações na Central de Atendimento, pois os clientes ficaram um pouco confusos com os horários indicados para a entrega. Ao investigar o problema, o time de desenvolvimento entendeu que os horários apresentados estavam no formato de 12hs (AM/PM), sendo que o correto seria utilizar o formato de 24hs. Sua missão: criar um algoritmo capaz de fazer essa conversão! Para isso, crie uma função que receba um horário qualquer, respeitando o formato 12hs (06:15:25PM) e retorne o equivalente (18:15:25).

2. Desafio: Quantidade de Palavras

Neste desafio, sua missão será encontrar a quantidade de palavras existentes na seguinte frase:

"façaMercadoNoIfoodEntregamosTudoOQueVocêPrecisaNaPortaDaSuaCasa"
Como você pode perceber, essa frase está no padrão camelCase, portanto cada nova palavra é representada pela inicial em maiúscula. Crie uma função que receba uma string e retorne a quantidade de palavras existentes!

RESPOSTA: 
function quantasPalavras(frase) {
    // Inicializa o contador de palavras com 1
    let contadorPalavras = 1;
  
    // Percorre a frase a partir do segundo caractere
    for (let i = 1; i < frase.length; i++) {
      const caractereAtual = frase.charAt(i);
  
      // Se o caractere atual for uma letra maiúscula, incrementamos o contador
      if (caractereAtual === caractereAtual.toUpperCase()) {
        contadorPalavras++;
      }
    }
  
    return contadorPalavras;
  }
  
  const frase = "façaMercadoNoIfoodEntregamosTudoOQueVocêPrecisaNaPortaDaSuaCasa";
  const quantidadeDePalavras = quantasPalavras(frase);
  console.log(quantidadeDePalavras);



3. Desafio: Número Solitário

Neste desafio, seu objetivo é encontrar o(s) número(s) solitário(s) (que não se repete), a partir do array de números fornecido. Para resolver, crie uma função que recebe um array com os seguintes números:

[12, 17, 15, 19, 22, 17, 19, 12]
E retorne os que não estiverem repetidos.

RESPOSTA:
function removedorDeDuplicados(numeros) {
  const unicos = {};

  for (const feedback of numeros) {
    unicos[feedback] = true;
  }

  const semDuplicatas = [];

  for (const feedback in unicos) {
    if (unicos.hasOwnProperty(feedback)) {
      semDuplicatas.push(feedback);
    }
  }

  return semDuplicatas;
}

const numeros = [
  "Melhorar responsividade do site",
  "Erros confusos",
  "Os botões são intuitivos",
  "Erros confusos",
];

const semDuplicatas = removedorDeDuplicados(numeros);
console.log(semDuplicatas);


4. Qual é a saída do código a seguir?

let n = 4;
for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= i; j++) {
        console.log(j);
    }
}

a. Não imprime nada

b. 1 2 3

c. 1 1 2 1 2 3 1 2 3

d. 1 2 3 4

*. 1 1 2 1 2 3 1 2 3 4


5. Qual é o resultado da expressão booleana abaixo?

!(true && false) || (false && true)

*. true

b. null

c. false

d. NaN

e. undefined

6. Qual o valor da saída do código abaixo?

let x = 0;
let a = 0;
let b = -5;
if (a > 0) {
    if (b < 0) {
        x = x + 5;
    } else if (a > 5) {
        x = x + 4;
    } else {
        x = x + 3;
    }
} else {
    x = x + 2;
}
console.log(x);

a) 0

*) 2

c) 3

d) 4